# Importation des biblioth√®ques n√©cessaires
import numpy as np
import pandas as pd
import time
from datetime import datetime
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# D√©finition de la salle cible pour la simulation
target_room = "F106"

# Fichier CSV contenant les donn√©es simul√©es
csv_file = "simulation_bureau2.csv"
last_timestamp = None  # Variable pour stocker le dernier timestamp trait√©

# G√©n√©ration de donn√©es factices pour l'entra√Ænement du mod√®le
np.random.seed(42)  # Fixer la graine pour la reproductibilit√©
n_samples = 500  # Nombre de samples √† g√©n√©rer
data_train = {
    'temperature_exterieure': np.random.uniform(-5, 35, n_samples),  # Temp√©rature ext√©rieure al√©atoire
    'humidite': np.random.uniform(20, 80, n_samples),  # Humidit√© al√©atoire
    'heure': np.random.randint(0, 24, n_samples),  # Heure al√©atoire
    'aeration': np.random.choice([0, 1], n_samples),  # A√©ration (0 ou 1)
    'occupation': np.random.randint(0, 20, n_samples),  # Nombre d'occupants (al√©atoire)
    'habitude_utilisateur': np.random.uniform(18, 24, n_samples),  # Habitude de temp√©rature de l'utilisateur
    'contrainte_energie': np.random.uniform(0.5, 1.5, n_samples)  # Contrainte √©nerg√©tique al√©atoire
}

# Calcul de la temp√©rature optimale en fonction des habitudes et de la contrainte √©nerg√©tique
data_train["temperature_optimale"] = (
    data_train['habitude_utilisateur'] * data_train['contrainte_energie'] +  # Temp√©rature optimale calcul√©e
    np.random.normal(0, 1, n_samples)  # Ajouter du bruit √† la temp√©rature optimale
)
df_train = pd.DataFrame(data_train)  # Conversion des donn√©es en DataFrame pandas

# D√©finition des variables X (features) et y (cible)
X = df_train.drop(columns=["temperature_optimale"])  # Suppression de la colonne cible de X
y = df_train["temperature_optimale"]  # La cible est la temp√©rature optimale

# Cr√©ation et entra√Ænement du mod√®le RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)  # 100 arbres dans la for√™t
model.fit(X, y)  # Entra√Ænement du mod√®le avec les donn√©es

# Cr√©ation de la figure pour le graphique
plt.ion()  # Mode interactif activ√© pour mettre √† jour le graphique en temps r√©el
fig, ax = plt.subplots(figsize=(10, 6))
ax.set_xlabel("Temps")
ax.set_ylabel("Temp√©rature (¬∞C)")
ax.set_title("Temp√©rature Pr√©dite vs Temp√©rature Actuelle")
line_pred, = ax.plot([], [], label="Temp√©rature Pr√©dite", color="blue")
line_act, = ax.plot([], [], label="Temp√©rature Actuelle", color="red")
ax.legend()

# Listes pour stocker les valeurs de temp√©rature pour le graphique
times = []
temp_pred_values = []
temp_act_values = []

# Boucle infinie pour traiter les donn√©es en temps r√©el
while True:
    # Lire le fichier CSV et convertir la colonne "timestamp" en format datetime
    df = pd.read_csv(csv_file, parse_dates=["timestamp"])

    # Filtrer les donn√©es pour ne garder que celles de la salle cible
    if target_room:
        df = df[df["room"] == target_room]

    # V√©rifier si de nouvelles donn√©es sont arriv√©es (par rapport √† la derni√®re ligne trait√©e)
    if last_timestamp is None or df["timestamp"].max() > last_timestamp:
        last_timestamp = df["timestamp"].max()  # Mettre √† jour le dernier timestamp
        new_data = df[df["timestamp"] == last_timestamp]  # Extraire les nouvelles donn√©es

        # Regrouper les donn√©es par timestamp pour calculer des moyennes et des sommes
        grouped = new_data.groupby("timestamp").agg({
            "temp_ext": "mean",  # Moyenne de la temp√©rature ext√©rieure
            "temp_int": "mean",  # Moyenne de la temp√©rature int√©rieure
            "window_open": "max",  # Maximum pour l'√©tat de la fen√™tre (ouverte ou ferm√©e)
            "presence": "sum"  # Somme des pr√©sences (combien de personnes pr√©sentes)
        }).reset_index()

        # Renommer les colonnes pour correspondre aux noms attendus par le mod√®le
        grouped.rename(columns={"window_open": "aeration", "presence": "occupation"}, inplace=True)
        
        # Ajouter des colonnes suppl√©mentaires n√©cessaires pour la pr√©diction
        grouped["humidite"] = 50  # Humidit√© constante de 50 pour la simulation
        grouped["heure"] = grouped["timestamp"].dt.hour  # Extraire l'heure du timestamp
        grouped["habitude_utilisateur"] = grouped["temp_int"]  # Temp√©rature int√©rieure comme habitude utilisateur
        grouped["contrainte_energie"] = 1.0  # Valeur fixe pour la contrainte √©nerg√©tique

        # S√©lectionner la derni√®re ligne de donn√©es pour la pr√©diction
        nouvelle_donnee = grouped.iloc[-1]

        # Pr√©parer les caract√©ristiques pour faire la pr√©diction
        features = np.array([[
            nouvelle_donnee["temp_ext"],
            nouvelle_donnee["humidite"],
            nouvelle_donnee["heure"],
            nouvelle_donnee["aeration"],
            nouvelle_donnee["occupation"],
            nouvelle_donnee["habitude_utilisateur"],
            nouvelle_donnee["contrainte_energie"]
        ]])

        # Effectuer la pr√©diction de la temp√©rature optimale
        prediction = model.predict(features)[0]
        temp_actuelle = nouvelle_donnee["temp_int"]  # Temp√©rature int√©rieure actuelle

        # Afficher les r√©sultats de la pr√©diction et de la temp√©rature actuelle
        print(f"\nüìä Nouvelle donn√©e re√ßue √† {last_timestamp}:")
        print(f"Temp√©rature optimale pr√©dite : {prediction:.2f}¬∞C")
        print(f"Temp√©rature actuelle : {temp_actuelle:.2f}¬∞C")
        
        #Conditions pour augementer ou r√©duire le chauffage
        if (temp_actuelle > prediction):
            print("R√©duire le Chauffage")
        elif (temp_actuelle < prediction):
            print("Augmenter le Chauffage")
        else :
            print("Temp√©rature optimale atteinte")
        # Si l'√©cart entre la temp√©rature actuelle et la pr√©dite est trop grand, afficher une alerte
        if abs(temp_actuelle - prediction) > 5:
            print("‚ö†Ô∏è Alerte : Temp√©rature anormale d√©tect√©e !")
            
        # Ajouter les nouvelles donn√©es aux listes pour le trac√©
        times.append(last_timestamp)
        temp_pred_values.append(prediction)
        temp_act_values.append(temp_actuelle)

        # Mettre √† jour le graphique avec les nouvelles donn√©es
        line_pred.set_xdata(times)
        line_pred.set_ydata(temp_pred_values)
        line_act.set_xdata(times)
        line_act.set_ydata(temp_act_values)

        # R√©actualiser le graphique
        plt.draw()
        plt.pause(0.1)  # Pause pour permettre le rafra√Æchissement de la fen√™tre

    # Attendre 2 secondes avant de v√©rifier √† nouveau
    time.sleep(2)  # V√©rifier toutes les 2 secondes
